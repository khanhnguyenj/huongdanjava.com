/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.4.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.huongdanjava.openapispring.web;

import com.huongdanjava.openapispring.dto.Response;
import com.huongdanjava.openapispring.dto.Student;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-02-18T10:29:18.203151+07:00[Asia/Ho_Chi_Minh]")
@Validated
@Tag(name = "students", description = "the students API")
public interface StudentsApi {

    default StudentsApiDelegate getDelegate() {
        return new StudentsApiDelegate() {};
    }

    /**
     * DELETE /students/{id} : Delete a student by id
     *
     * @param id Id of the Student (required)
     * @return Delete student information successfully (status code 200)
     */
    @Operation(
        operationId = "deleteStudentById",
        summary = "Delete a student by id",
        responses = {
            @ApiResponse(responseCode = "200", description = "Delete student information successfully", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Response.class)))
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/students/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<Response> deleteStudentById(
        @Parameter(name = "id", description = "Id of the Student", required = true, schema = @Schema(description = "")) @PathVariable("id") String id
    ) {
        return getDelegate().deleteStudentById(id);
    }


    /**
     * GET /students/{id} : Get a student by id
     *
     * @param id Id of the Student (required)
     * @return Get student information successfully (status code 200)
     */
    @Operation(
        operationId = "getStudentById",
        summary = "Get a student by id",
        responses = {
            @ApiResponse(responseCode = "200", description = "Get student information successfully", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Student.class)))
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/students/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<Student> getStudentById(
        @Parameter(name = "id", description = "Id of the Student", required = true, schema = @Schema(description = "")) @PathVariable("id") String id
    ) {
        return getDelegate().getStudentById(id);
    }


    /**
     * GET /students : Get all students
     *
     * @return Get all students successfully (status code 200)
     */
    @Operation(
        operationId = "getStudents",
        summary = "Get all students",
        responses = {
            @ApiResponse(responseCode = "200", description = "Get all students successfully", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Student.class)))
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/students",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Student>> getStudents(
        
    ) {
        return getDelegate().getStudents();
    }

}
