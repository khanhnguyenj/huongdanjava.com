/*
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.15.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.huongdanjava.openapi.web;

import com.huongdanjava.openapi.dto.AddNewStudentResponse;
import com.huongdanjava.openapi.dto.DeleteStudentResponse;
import com.huongdanjava.openapi.dto.GetAllStudentsResponse;
import com.huongdanjava.openapi.dto.GetStudentByIdResponse;
import com.huongdanjava.openapi.dto.InlineObject;
import com.huongdanjava.openapi.dto.InlineObject1;
import com.huongdanjava.openapi.dto.Student;
import com.huongdanjava.openapi.dto.UpdateStudentResponse;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ExampleObject;
import org.springframework.lang.Nullable;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.server.ServerWebExchange;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;
import org.springframework.http.codec.multipart.Part;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-09-28T20:23:53.641444+08:00[Asia/Singapore]", comments = "Generator version: 7.15.0")
@Validated
@Tag(name = "students", description = "the students API")
public interface StudentsApi {

    default StudentsApiDelegate getDelegate() {
        return new StudentsApiDelegate() {};
    }

    public static final String PATH_ADD_NEW_STUDENT = "/students";
    /**
     * POST /students : Add a new student
     *
     * @param student  (optional)
     * @return Add new student successfully (status code 200)
     *         or Bad Request (status code 400)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "addNewStudent",
        summary = "Add a new student",
        responses = {
            @ApiResponse(responseCode = "200", description = "Add new student successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AddNewStudentResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = InlineObject.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = InlineObject1.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = StudentsApi.PATH_ADD_NEW_STUDENT,
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default Mono<ResponseEntity<AddNewStudentResponse>> addNewStudent(
        @Parameter(name = "Student", description = "") @Valid @RequestBody(required = false) Mono<Student> student,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        return getDelegate().addNewStudent(student, exchange);
    }


    public static final String PATH_DELETE_STUDENT_BY_ID = "/students/{id}";
    /**
     * DELETE /students/{id} : Delete a student by Id
     *
     * @param id Student Id (required)
     * @return Delete student information successfully (status code 200)
     *         or Bad Request (status code 400)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "deleteStudentById",
        summary = "Delete a student by Id",
        responses = {
            @ApiResponse(responseCode = "200", description = "Delete student information successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DeleteStudentResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = InlineObject.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = InlineObject1.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = StudentsApi.PATH_DELETE_STUDENT_BY_ID,
        produces = { "application/json" }
    )
    
    default Mono<ResponseEntity<DeleteStudentResponse>> deleteStudentById(
        @Parameter(name = "id", description = "Student Id", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        return getDelegate().deleteStudentById(id, exchange);
    }


    public static final String PATH_GET_ALL_STUDENTS = "/students";
    /**
     * GET /students : Get all students
     *
     * @param page Page number (1-based). (optional, default to 1)
     * @param size Number of items per page. (optional, default to 10)
     * @return Get all students successfully (status code 200)
     *         or Bad Request (status code 400)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "getAllStudents",
        summary = "Get all students",
        responses = {
            @ApiResponse(responseCode = "200", description = "Get all students successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GetAllStudentsResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = InlineObject.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = InlineObject1.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = StudentsApi.PATH_GET_ALL_STUDENTS,
        produces = { "application/json" }
    )
    
    default Mono<ResponseEntity<GetAllStudentsResponse>> getAllStudents(
        @Min(1) @Parameter(name = "page", description = "Page number (1-based).", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page", required = false, defaultValue = "1") Integer page,
        @Min(1) @Max(100) @Parameter(name = "size", description = "Number of items per page.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "size", required = false, defaultValue = "10") Integer size,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        return getDelegate().getAllStudents(page, size, exchange);
    }


    public static final String PATH_GET_STUDENT_BY_ID = "/students/{id}";
    /**
     * GET /students/{id} : Get a student by Id
     *
     * @param id Student Id (required)
     * @return Get student information successfully (status code 200)
     *         or Bad Request (status code 400)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "getStudentById",
        summary = "Get a student by Id",
        responses = {
            @ApiResponse(responseCode = "200", description = "Get student information successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GetStudentByIdResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = InlineObject.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = InlineObject1.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = StudentsApi.PATH_GET_STUDENT_BY_ID,
        produces = { "application/json" }
    )
    
    default Mono<ResponseEntity<GetStudentByIdResponse>> getStudentById(
        @Parameter(name = "id", description = "Student Id", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        return getDelegate().getStudentById(id, exchange);
    }


    public static final String PATH_UPDATE_STUDENT = "/students/{id}";
    /**
     * PUT /students/{id} : Update a student
     *
     * @param id Student Id (required)
     * @param student  (optional)
     * @return Update student information successfully (status code 200)
     *         or Bad Request (status code 400)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "updateStudent",
        summary = "Update a student",
        responses = {
            @ApiResponse(responseCode = "200", description = "Update student information successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UpdateStudentResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = InlineObject.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = InlineObject1.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = StudentsApi.PATH_UPDATE_STUDENT,
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default Mono<ResponseEntity<UpdateStudentResponse>> updateStudent(
        @Parameter(name = "id", description = "Student Id", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "Student", description = "") @Valid @RequestBody(required = false) Mono<Student> student,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        return getDelegate().updateStudent(id, student, exchange);
    }

}
