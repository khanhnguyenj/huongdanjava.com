 /** Generated by the 'DATA_FETCHER_DELEGATE' default template from graphql-java-generator */
package com.huongdanjava.graphql.util;

import java.util.List;
import java.util.NoSuchElementException;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;

import org.dataloader.BatchLoaderEnvironment;
import org.dataloader.DataLoader;
import org.reactivestreams.Publisher;

import com.graphql_java_generator.annotation.GraphQLDirective;
import com.graphql_java_generator.util.GraphqlUtils;

import graphql.GraphQLContext;
import graphql.schema.DataFetchingEnvironment;

/**
 * This interface contains the fata fetchers that are delegated in the bean that the implementation has to provide, when
 * fetching fields for the Student GraphQL type, as defined in the provided GraphQL schema. Please read the
 * <a href="https://github.com/graphql-java-generator/graphql-maven-plugin-project/wiki/server"> wiki server page</a>
 * for more information on this.
 *
 * @author generated by graphql-java-generator
 * @see <a href="https://github.com/graphql-java-generator/graphql-java-generator">https://github.com/graphql-java-generator/graphql-java-generator</a>
 */
@SuppressWarnings("unused")
public interface DataFetchersDelegateStudent {
	
   	/**
	 * This method loads a list of ${dataFetcher.field.name}, based on the list of id to be fetched. This method is used by
	 * <A HREF="https://github.com/graphql-java/java-dataloader">graphql-java java-dataloader</A> to highly optimize the
	 * number of requests to the server, when recursing down through the object associations.<BR/>
	 * You can find more information on this page:
	 * <A HREF="https://www.graphql-java.com/documentation/batching/">graphql-java batching</A><BR/>
	 * <B>Important notes:</B> 
	 * <UL>
	 * <LI>The list returned by this method must be sorted in the exact same order as the given <i>keys</i> list. If values 
	 * are missing (no value for a given key), then the returned list must contain a null value at this key's position.</LI>
	 * <LI>One of <code>batchLoader</code> or <code>unorderedReturnBatchLoader</code> must be overriden in the data fetcher 
	 * implementation. If not, then a NullPointerException will be thrown at runtime, with a proper error message.</LI>
	 * <LI>If your data storage implementation makes it complex to return values in the same order as the keys list, then it's 
	 * easier to override <code>unorderedReturnBatchLoader</code>, and let the default implementation of 
	 * <code>batchLoader</code> order the values</LI>
	 * </UL> 
	 * 
	 * @param keys
	 *            A list of ID's id, for which the matching objects must be returned
	 * @param environment
	 *            The Data Loader environment
	 * @return A list of IDs
	 */
	default public List<com.huongdanjava.graphql.Student> batchLoader(List<java.util.UUID> keys, BatchLoaderEnvironment environment) {
		List<com.huongdanjava.graphql.Student> ret = unorderedReturnBatchLoader(keys, environment);
		if (ret == null)
			throw new NullPointerException("Either batchLoader or unorderedReturnBatchLoader must be overriden in DataFetchersDelegateStudent implementation. And unorderedReturnBatchLoader must return a list."); //$NON-NLS-1$
		return GraphqlUtils.graphqlUtils.orderList(keys, ret, "id"); //$NON-NLS-1$
	}

	/**
	 * This method loads a list of ${dataFetcher.field.name}, based on the list of id to be fetched. This method is used by
	 * <A HREF="https://github.com/graphql-java/java-dataloader">graphql-java java-dataloader</A> to highly optimize the
	 * number of requests to the server, when recursing down through the object associations.<BR/>
	 * You can find more information on this page:
	 * <A HREF="https://www.graphql-java.com/documentation/batching/">graphql-java batching</A><BR/>
	 * <B>Important notes:</B> 
	 * <UL>
	 * <LI>The list returned may be in any order: this method is called by the default implementation of <code>batchLoader</code>, 
	 * which will sort the value return by this method, according to the given <i>keys</i> list.</LI>
	 * <LI>There may be missing values (no value for a given key): the default implementation of <code>batchLoader</code> will
	 * replace these missing values by a null value at this key's position.</LI>
	 * <LI>One of <code>batchLoader</code> or <code>unorderedReturnBatchLoader</code> must be overriden in the data fetcher 
	 * implementation. If not, then a NullPointerException will be thrown at runtime, with a proper error message.</LI>
	 * <LI>If your data storage implementation makes it complex to return values in the same order as the keys list, then it's 
	 * easier to override <code>unorderedReturnBatchLoader</code>, and let the default implementation of 
	 * <code>batchLoader</code> order the values</LI>
	 * <LI>If your data storage implementation makes it easy to return values in the same order as the keys list, then the  
	 * execution is a little quicker if you override <code>batchLoader</code>, as there would be no sort of the returned list.</LI>
	 * </UL> 
	 * 
	 * @param keys
	 *            A list of ID's id, for which the matching objects must be returned
	 * @param environment
	 *            The Data Loader environment
	 * @return
	 */
	default public List<com.huongdanjava.graphql.Student> unorderedReturnBatchLoader(List<java.util.UUID> keys, BatchLoaderEnvironment environment) {
		return null;
	}

}
