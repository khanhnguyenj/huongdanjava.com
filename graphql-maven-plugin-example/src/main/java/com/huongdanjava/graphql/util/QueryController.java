/** Generated by the 'ENTITY_CONTROLLER' default template from graphql-java-generator */
package com.huongdanjava.graphql.util;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;

import org.dataloader.BatchLoaderEnvironment;
import org.dataloader.DataLoader;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.graphql.data.method.annotation.Argument;
import org.springframework.graphql.data.method.annotation.BatchMapping;
import org.springframework.graphql.data.method.annotation.SchemaMapping;
import org.springframework.graphql.execution.BatchLoaderRegistry;
import org.springframework.stereotype.Controller;

import com.graphql_java_generator.server.util.GraphqlServerUtils;
import com.graphql_java_generator.util.GraphqlUtils;

import graphql.GraphQLContext;
import graphql.schema.DataFetchingEnvironment;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;


/**
 * @author generated by graphql-java-generator
 * @see <a href="https://github.com/graphql-java-generator/graphql-java-generator">https://github.com/graphql-java-generator/graphql-java-generator</a>
 */
@Controller
@SchemaMapping(typeName = "Query")
@SuppressWarnings("unused")
public class QueryController {

	@Autowired
	protected DataFetchersDelegateQuery dataFetchersDelegateQuery;

	@Autowired
	protected GraphqlServerUtils graphqlServerUtils;

	
           	/**
	 * This method loads the data for ${dataFetcher.graphQLType}.students.  It returns an Object: the data 
	 * fetcher implementation may return any type that is accepted by a spring-graphql controller<BR/>
	 * 
	 * 
	 * @param dataFetchingEnvironment
	 *            The GraphQL {@link DataFetchingEnvironment}. It gives you access to the full GraphQL context for this
	 *            DataFetcher
	 * @param origin
	 *            The object from which the field is fetch. In other word: the aim of this data fetcher is to fetch the
	 *            author attribute of the <I>origin</I>, which is an instance of {ObjectType {name:Post,
	 *            fields:{Field{name:id, type:ID!, params:[]},Field{name:date, type:Date!, params:[]},Field{name:author,
	 *            type:Member, params:[]},Field{name:publiclyAvailable, type:Boolean, params:[]},Field{name:title,
	 *            type:String!, params:[]},Field{name:content, type:String!, params:[]},Field{name:authorId, type:ID,
	 *            params:[]},Field{name:topicId, type:ID, params:[]}}, comments ""}. It depends on your data modle, but
	 *            it typically contains the id to use in the query.
	 * @throws NoSuchElementException
	 *             This method may return a {@link NoSuchElementException} exception. In this case, the exception is
	 *             trapped by the calling method, and the return is consider as null. This allows to use the
	 *             {@link Optional#get()} method directly, without caring of whether or not there is a value. The
	 *             generated code will take care of the {@link NoSuchElementException} exception.
	 * @param clazz
	 *             The parameter that will receive the field argument of the same name for the current data to fetch
	 * @return 
	 * 		It may return any value that is valid for a spring-graphql controller, annotated by 
	 * 		the <code>@SchemaMapping</code> annotation
	 */
	@SchemaMapping(field = "students") 
	public Object students(DataFetchingEnvironment dataFetchingEnvironment, 
			@Argument("clazz") java.lang.String clazz) {
 		return  this.dataFetchersDelegateQuery.students(dataFetchingEnvironment , clazz);
	}

  }
