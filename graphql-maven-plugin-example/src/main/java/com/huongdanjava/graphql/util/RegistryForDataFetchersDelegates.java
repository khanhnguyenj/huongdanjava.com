/** Generated by the 'DATA_FETCHERS_DELEGATES_REGISTRY' default template from graphql-java-generator */
package com.huongdanjava.graphql.util;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.ApplicationContext;
import org.springframework.stereotype.Component;

/**
 * This registry logs each DataFetchersDelegate spring component. It's used by POJO, when the handle data fetchers
 * members. For instance with this GraphQL type:
 * 
 * <PRE>
 * type Member {
 *     name(uppercase: Boolean): String
 * }
 * </PRE>
 * 
 * A <code>name(String)</code> data fetcher method is created in the generated Membe POJO. It needs to call the
 * <code>name(String)</code> of the Member DataFetchersDelegate.<br/>
 * Since version 2.5<br/>
 * This class has been renamed as RegistryForDataFetchersDelegates (instead of DataFetchersDelegateRegistry) in 2.9, 
 * to avoid name collision with a possible "Registry" type that could be defined in the provided GraphQL schema. 
 * 
 * @author generated by graphql-java-generator
 * @see <a href=
 *      "https://github.com/graphql-java-generator/graphql-java-generator">https://github.com/graphql-java-generator/graphql-java-generator</a>
 */
@Component
public class RegistryForDataFetchersDelegates {	

	// This singleton is used by POJO to access to the DataFetchersDelegateMyQueryType created by Spring
	public static RegistryForDataFetchersDelegates dataFetchersDelegateRegistry;

	@Autowired
	ApplicationContext ctx;

	@Autowired
	DataFetchersDelegateQuery dataFetchersDelegateQuery;
	@Autowired
	DataFetchersDelegateStudent dataFetchersDelegateStudent;

	public RegistryForDataFetchersDelegates() {
		dataFetchersDelegateRegistry = this;
	}

	public DataFetchersDelegateQuery getDataFetchersDelegateQuery() {
		return this.dataFetchersDelegateQuery;
	}

	public DataFetchersDelegateStudent getDataFetchersDelegateStudent() {
		return this.dataFetchersDelegateStudent;
	}
}
