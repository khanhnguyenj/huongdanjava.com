/** Generated by the 'ENTITY_CONTROLLER' default template from graphql-java-generator */
package com.huongdanjava.graphql.util;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;

import org.dataloader.BatchLoaderEnvironment;
import org.dataloader.DataLoader;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.graphql.data.method.annotation.Argument;
import org.springframework.graphql.data.method.annotation.BatchMapping;
import org.springframework.graphql.data.method.annotation.SchemaMapping;
import org.springframework.graphql.execution.BatchLoaderRegistry;
import org.springframework.stereotype.Controller;

import com.graphql_java_generator.server.util.GraphqlServerUtils;
import com.graphql_java_generator.util.GraphqlUtils;

import graphql.GraphQLContext;
import graphql.schema.DataFetchingEnvironment;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;


/**
 * @author generated by graphql-java-generator
 * @see <a href="https://github.com/graphql-java-generator/graphql-java-generator">https://github.com/graphql-java-generator/graphql-java-generator</a>
 */
@Controller
@SchemaMapping(typeName = "Student")
@SuppressWarnings("unused")
public class StudentController {

	@Autowired
	protected DataFetchersDelegateStudent dataFetchersDelegateStudent;

	@Autowired
	protected GraphqlServerUtils graphqlServerUtils;

	public StudentController(BatchLoaderRegistry registry) {
		// Registering the data loaders is useless if the @BatchMapping is used. But we need it here, for backward
		// compatibility with code developed against the previous plugin versions
		registry.forTypePair(java.util.UUID.class, com.huongdanjava.graphql.Student.class).registerMappedBatchLoader((keysSet, env) -> {
			List<java.util.UUID> keys = new ArrayList<>(keysSet.size());
			keys.addAll(keysSet);
			return Mono.fromCallable(() -> {
				Map<java.util.UUID, com.huongdanjava.graphql.Student> map = new HashMap<>();
				// Values are returned in the same order as the keys list
				List<com.huongdanjava.graphql.Student> values = this.dataFetchersDelegateStudent.batchLoader(keys, env);
				for (int i = 0; i < keys.size(); i += 1) {
					map.put(keys.get(i), values.get(i));
				}
				return map;
			});
		});

	}
	
 }
